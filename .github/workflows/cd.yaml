name: K3s 

on:
  push:
    branches:
      - main_
  workflow_dispatch:

env:
  TF_VAR_gcp_project_id: id 

jobs:
  deploy-k3s:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install K3S-UP
        run: |
          #curl -sLS https://get.k3sup.dev | sh
          wget https://github.com/alexellis/k3sup/releases/download/0.13.10/k3sup
          chmod +x k3sup
          sudo cp k3sup /usr/local/bin/
          pwd
          ls -al

      - name: Install K3S-VERSION
        run: |
          k3sup version

      - name: Create SSH KEYs & CONFIG
        run: |
          mkdir ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_PUB_KEY" > ~/.ssh/id_rsa.pub
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          echo "$SSH_PUB_KEY" > /tmp/id_rsa.pub
          echo "$SSH_KEY" > /tmp/id_rsa
          chmod 600 ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          echo "$SSHCONFIG"  > ~/.ssh/config
          chmod 400 ~/.ssh/config
          ls -al ~/.ssh
        env:
          SSH_PUB_KEY: ${{ secrets.SSH_PUB_KEY }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSHCONFIG: ${{ vars.SSHCONFIG }}

      - name: Check SSH KEYs
        run: |
          ls -al /tmp
          cat /tmp/id_rsa
          cat /tmp/id_rsa.pub
          cat ~/.ssh/config

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        id: apply
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Get VM IP Address
        id: get-ip
        run: |
          cd terraform
          VM_IP=$(terraform output -raw external_ip)
          echo "VM_IP=$VM_IP" >> $GITHUB_ENV

      - name: Check connection
        run: |
          sleep 12s
          nc -zv $VM_IP 22
        continue-on-error: true

      - name: K3s bootstrap
        run: |
          k3sup install \
            --ip $VM_IP \
            --context k3s \
            --ssh-key ~/.ssh/id_rsa \
            --user gabriel 
            #           --k3s-version v1.29.15-rc2+k3s1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'

      - name: Check K3s
        run: |
          export KUBECONFIG=/home/runner/work/scalabit-/scalabit-/kubeconfig
          kubectl config use-context k3s
          kubectl get node -o wide
          kubectl get pods -A
          echo "KUBECONFIG=/home/runner/work/scalabit-/scalabit-/kubeconfig" >> $GITHUB_ENV

      - name: Cat kubeconfig
        run: |
          cat  /home/runner/work/scalabit-/scalabit-/kubeconfig

      - name: Deploy Gatekeeper I
        run: |
          kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/release-3.15/deploy/gatekeeper.yaml

      - name: Deploy Gatekeeper II
        run: |
          kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/allowedrepos/template.yaml

          #      - name: Deploy Gatekeeper Constraint
          #        run: |
          #         sleep 20s
          #          cat manifests/gk-constraint.yaml
          #          kubectl apply -f manifests/gk-constraint.yaml
          #          kubectl get crd k8sallowedrepos.constraints.gatekeeper.sh

      - name: Deploy APP
        run: |
          kubectl apply -f manifests/app.yaml

      - name: Deploy Ingress Conf.
        run: |
          kubectl apply -f manifests/ingress.yaml

      - name: Wait for pod to be running using a loop
        run: |
          echo "Waiting for pod to become running..."
          TIMEOUT=300
          START_TIME=$(date +%s)
          while true; do
            # Get the pod status
            POD_STATUS=$(kubectl get pod -l app=node-app -n default -o jsonpath='{.items[0].status.phase}' 2>/dev/null)
            # Check if pod is Running
            if [ "$POD_STATUS" == "Running" ]; then
              echo "Pod is running! Check complete."
              break
            fi
            # Check for timeout
            CURRENT_TIME=$(date +%s)
            if [ $((CURRENT_TIME - START_TIME)) -ge $TIMEOUT ]; then
              echo "Timeout: Pod did not start within $TIMEOUT seconds."
              exit 1
            fi
            echo "Pod status is '$POD_STATUS', waiting..."
            sleep 10
          done

      - name: Deploy Gatekeeper Constraint
        run: |
          sleep 20s
          cat manifests/gk-constraint.yaml
          kubectl apply -f manifests/gk-constraint.yaml
          kubectl get crd k8sallowedrepos.constraints.gatekeeper.sh
